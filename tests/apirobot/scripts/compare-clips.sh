#!/bin/bash -x
API_DOMAIN="sf-test1.com"
API_USER="test.user+dev1@smartfrog.com"
API_PASSWORD="Test123!!!"
CLIP_DURATION=120
SCRATCH_DIR="/opt/robotframework/artifact_store"

print_help() {
  cat << HELP 
User clip generation test script.
Options:
  -d|--domain name         Base name of the API domain. Default "sf-dev1.com".
  -u|--user user           Name of the Smarffog user.
  -p|--password password   Smartfrog user password.
HELP
}

exit_error() {
    echo "Error: $*" 1>&2
    exit 1
}

progress_log() {
    echo "  $*" 1>&2
}

download() {
    from="$1"
    to="$2"
    progress_log "Downloading ${from} to ${to}"
    curl -L -o "${to}" "${from}" 2>>"${err_log}" || exit_error "Failed downloading ${from}"
}


poll_clip() {
    key="$1"
    base_url="$2"
    time_limit="$3"

    err="${SCRATCH_DIR}/${key}_userClips.err"
    out="${SCRATCH_DIR}/${key}_userClips.json"

    result=""

    query="${base_url}/userClips?devices=${DEVICE_ID}&access_token=${API_TOKEN}"

    progress_log "Polling ${key} results from ${query}"

    while [ -z "${result}" ] && [ "${time_limit}" -gt 0 ];
    do
        progress_log "  seconds left ${time_limit}";

        curl -X GET "${query}" >"${out}" 2> "${err}" \
                || exit_error "Failed calling ${key} API: see ${out} and ${err} for details"

        result=$(jq --raw-output ".response.items[] | select(.userDescription == \"${CLIP_ID}\")" <"${out}" ) \
                || exit_error "Failed parsingn ${key} API output: see ${out} for details"

        sleep 1;
        time_limit=$((time_limit-1));
    done

    [ "${time_limit}" -eq 0 ] && exit_error "No clip generated by the ${key} service"

    echo "${result}"
}

# Parse command line argunents
while [ $# -gt 0 ]
do
    key="$1"
    case $key in
        -d|--domain)
            API_DOMAIN="$2"
            shift
            ;;
        -u|--user)
            API_USER="$2"
            shift
            ;;
        -p|--password)
            API_PASSWORD="$2"
            shift
            ;;
        -t|--duration)
            CLIP_DURATION="$2"
            shift
            ;;
        -h|--help)
            print_help
            exit
            ;;
        *)    # unknown option
            ;;
    esac
    shift
done

# Check paarmeter
[ -z "${API_USER}" ] && exit_error "Missing Smartfrog user name"
[ -z "${API_PASSWORD}" ] && exit_error "Missing user password"

# Run the scenario
echo "Clip generation test configuaration"
echo "  API domain    : ${API_DOMAIN}"
echo "  Useer name    : ${API_USER}"
echo "  Password      : ${API_PASSWORD}"
echo "  Clip duration : ${CLIP_DURATION}"
echo "  Scratch dir   : ${SCRATCH_DIR}"
echo "Running clip generation test:"

err_log="${SCRATCH_DIR}/err.log"

## 1. Get user token to access API
API_TOKEN=$(curl -X POST \
    --data-urlencode "grant_type=password" \
    --data-urlencode "device=Browser" \
    --data-urlencode "password=${API_PASSWORD}" \
    --data-urlencode "scope=Standard" \
    --data-urlencode "username=${API_USER}" \
    "https://app.${API_DOMAIN}/oauth/token" 2>>"${err_log}" | jq --raw-output ".access_token")

[ -z "${API_TOKEN}" ] && exit_error "Unable to retrieve user API token"

progress_log "User API token ${API_TOKEN}"

## 2. Pick active user device
DEVICE_ID=$(curl -X GET "https://app.${API_DOMAIN}/v1/user/devices?access_token=${API_TOKEN}" 2>>"${err_log}" | \
            jq --raw-output '.response[] | select(.deviceClass == "IPCam" and .operatingStatus == "Publishing") | .uuid' | head -1)

[ -z "${DEVICE_ID}" ] && exit_error "No publishing device found for the user."

progress_log "User device ID ${DEVICE_ID}"

## 3. Request user clip creation with VideoCloud

CLIP_END=$(date +%s)
CLIP_START=$((CLIP_END-CLIP_DURATION))
CLIP_ID="${CLIP_START}:${CLIP_END}"

STATUS=$(curl -X POST \
    -H 'content-type: application/json;charset=UTF-8' \
    -d "$(jq -n --arg s "${CLIP_START}000" --arg e "${CLIP_END}000" --arg d "${CLIP_ID}" '{start: $s, end: $e, userDescription: $d, type: "USER_CLIP"}')" \
    "https://app.${API_DOMAIN}/v1/user/devices/${DEVICE_ID}/userClips?access_token=${API_TOKEN}" 2>>"${err_log}" \
    | jq --raw-output '.status')

[ "${STATUS}" != "SUCCESS" ] && exit_error "No connected device found for the user."

progress_log "Requested generation of clip ${CLIP_ID}"

TIME_LIMIT=$((CLIP_DURATION+5))

## 4. Poll clip generation results from the VideoCLoud
progress_log "Looking for clip generated by VideoCloud..."
OLD_CLIP=$(poll_clip "old" "https://app.${API_DOMAIN}/v1/user" "${TIME_LIMIT}") || exit_error "Failed polling VideoCloud: ${OLD_CLIP}"
progress_log "Clip generated by VideoCloud:"
progress_log "${OLD_CLIP}"


## 4. Poll clip generation results from the VideoCLoud
progress_log "Looking for clip generated by Video Services 2.0..."
NEW_CLIP=$(poll_clip "new" "https://clip-api.k8s.${API_DOMAIN}/v2/user" "${TIME_LIMIT}" ) || exit_error "Failed polling Video Services 2.0: ${NEW_CLIP}"
progress_log "Clip generated by Video Services 2.0:"
progress_log "${NEW_CLIP}"

## Download old and new artifacts

download "$(echo "${OLD_CLIP}" | jq --raw-output .playUrls.https | head -1)" "${SCRATCH_DIR}/old_clip.mp4"
download "$(echo "${OLD_CLIP}" | jq --raw-output .playUrls.preview | head -1)" "${SCRATCH_DIR}/old_preview.jpg"
download "$(echo "${NEW_CLIP}" | jq --raw-output .playUrls.https | head -1)?access_token=${API_TOKEN}" "${SCRATCH_DIR}/new_clip.mp4"
download "$(echo "${NEW_CLIP}" | jq --raw-output .playUrls.preview | head -1)?access_token=${API_TOKEN}" "${SCRATCH_DIR}/new_preview.jpg" 

## Compare generated results

progress_log "Checking video clips similarity"

SSIM=$(ffmpeg -i "${SCRATCH_DIR}/old_clip.mp4" -i "${SCRATCH_DIR}/new_clip.mp4" -max_muxing_queue_size 1024 -lavfi  "ssim" -f null - 2>&1 | tail -1 | sed -E 's/^.*All:([.0-9]+).*$/\1/')

progress_log "Checking image similarity using 'compare -metric NCC "${SCRATCH_DIR}/old_preview.jpg" "${SCRATCH_DIR}/new_preview.jpg" ${SCRATCH_DIR}/diff.jpg'"

NCC=$(compare -metric NCC "${SCRATCH_DIR}/old_preview.jpg" "${SCRATCH_DIR}/new_preview.jpg" "${SCRATCH_DIR}/diff.jpg" 2>&1) || true

rm -f “${SCRATCH_DIR}/diff.jpg”

progress_log "Similarity report:"
progress_log "  video SSIM = ${SSIM}"
progress_log "  image NCC = ${NCC}"